title="SQL Antipatterns - the good and the bad"
publication_date="2024-03-24T15:27:59.678125427+00:00"
language="en"
---- sadraskol ----

I read the 2010ish book from Bill Karwin "SQL Antipatterns".
This book is... well I'm confused.
It contains expert level sql patterns like nested sets.
It also has advices like use `age is not null` instead of `age <> null`.
What I was concerned with is the following sentence concerning polymorphic relations:

> Use foreign key whenever possible, except if you use a tested framework
> which will properly handle the relations

I wonder: can a framework *properly* handle foreign key on the application side?

## Foreign keys

A foreign key is a declared relationship between a child table and a parent table.
The database constraint makes sure that child rows must reference existing parent rows.
Foreign key allows to maintain the logical integrity of data.

## Polymorphic relations

Unfortunately, foreign keys only maintain 1:1 relationship.
Some frameworks allow to use polymorphic relationships.
We use Ruby on Rails for our examples.

To declare a polymorphic associations, the example the guide uses is the following:

``` bash
rails new polymorphic-demo --minimal --database=sqlite3
rails generate model employee name:text
rails generate model product name:text
rails generate model picture url:text
```

``` ruby
class CreatePictures < ActiveRecord::Migration[7.0]
  def change
    create_table :pictures do |t|
      t.string :name
      t.references :imageable, polymorphic: true
      t.timestamps
    end
  end
end

class Picture < ApplicationRecord
  belongs_to :imageable, polymorphic: true
end

class Employee < ApplicationRecord
  has_many :pictures, as: :imageable
end

class Product < ApplicationRecord
  has_many :pictures, as: :imageable
end
```

The resulting `pictures` table look like the following:

``` sql
table pictures (id integer primary key, imageable_id integer, imageable_type text)
```

No foreign key here!

----

refs:
- https://www.vertabelo.com/blog/on-delete-restrict-vs-on-delete-no-action/ No action vs restrict
- https://docs.planetscale.com/learn/operating-without-foreign-key-constraints foreign key explained by planetscale
- https://guides.rubyonrails.org/association_basics.html#polymorphic-associations polymorphic explained by ror
- To create minimal rails app https://www.bootrails.com/blog/rails-new-options/
