title = "Une compilation de quadrant"
language = "fr"
publication_date = "2020-03-16T12:54:16.271720+00:00"
---- sadraskol ----
Connaissez-vous le [quadrant](https://www.gartner.com/en/research/methodologies/magic-quadrants-research) de Gartner ? Cet indicateur est vendu par Gartner pour choisir le bon prestataire de service, comment situer l'acteur dans un marché difficile à lire. Ne nous détrompons pas : les entreprises paient des sommes suffisantes pour que Gartner fasse l'audit qui permettra de les inclure dans le quadrant, le quadrant est biaisé par défaut. Apparaître sur le quadrant devient un argument de vente pour les entreprises présentes dans le quadrant. Ce n'est pas ce qui nous intéresse ici.

Le quadrant lui-même utilise deux variables pour placer les acteurs. La première est la "completeness of vision" et la seconde "ability to execute". Si l'on se place à la place d'un décideur, on veut certainement que le prestataire soit fort dans les deux variables. Pour éviter donc de diriger tout le monde vers le même prestataire (et donc perdre l'intérêt des concurrents de s'inscrire à ce quadrant), Gartner définit 4 zones pour faire que tout le monde soit content : "Niche players", "Challengers", "Visionaries" et les "Leaders".

Cette séparation en 2 dimensions et en séparation de l'espace permet de donner l'impression que chacun a ses forces et faiblesses et de s'introduire à une rationalisation des solutions possibles. Au-delà de l'usage superficiel qui peut être fait de cet outil, il reste à la base des études comparatives, crucial pour comparer avec hauteur et discernement.

## Le quadrant de Kano

La [méthode de Kano](https://uxways.wordpress.com/2018/11/21/la-methode-kano/) permet d'évaluer la pertinence d'une fonctionnalité en répondant à deux questions : Quel est mon sentiment si la fonctionnalité est présente ? Quel est mon sentiment si la fonctionnalité est absente ?

Encore une fois la catégorisation est capitale : une fonctionnalité est soit "indispensable", "performante", "attractive" ou "répulsive". La position relative de chaque fonctionnalité importe assez peu car c'est surtout la catégorie qui va aider à comprendre son utilité.

## Les limites du quadrant

Je fais une parenthèse dans cette énumération de quadrants, car il me semble capital de contextualiser les quadrants. Leur aspect magique de catégorisation n'est pas absolu car 1) l'arbitraire des deux variables utilisées rend facile l'attaque de l'étude et 2) rien ne dit que le quadrant sera pertinent dans le futur.

Pour le premier point, il ne faut pas oublier que le quadrant n'est pas une étude comparative et qu'il faut multiplier les points de vue sur un problème pour évaluer finement les possibilités. Si vous voulez un exemple d'étude plus fine, vous pouvez consulter cette étude comparative de 7 langages pour réimplémenter [0install](http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install/).

Le temps est le second traître des quadrants et des études comparatives en général. Ce n'est pas un hasard si Gartner dépublie leurs articles car les acteurs de 2014 ne sont plus ceux de 2020. Il en est de même de l'étude sur [0install](http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install/) : les résultats sur rust ne serait certainement pas les mêmes aujourd'hui vu son évolution depuis 2013. Paradoxalement les quadrants sont tels la beauté des fleurs : aussi puissants qu'ils sont éphémères.

## Se débarrasser des variables

Il existe un quadrant qui ne s'embarrasse pas des variables et ne garde que les catégorisations. C'est le cas du framework [Cynefin](https://en.wikipedia.org/wiki/Cynefin_framework). Ce que le quadrant perd en finesse, il le gagne en assertivité. Je dois admettre ne pas comprendre ce genre de framework basé sur des théories assez fumeuses. Je laisse le lecteur juge des interprétations que formule ici.

Ce qui semble crucial dans ce genre de quadrant, c'est la capacité de la personne qui manipule le framework qui va donner l'illusion de son efficacité, non le framework lui-même. La catégorisation sera facilement compréhensible pour la personne qui lit le résultat, mais ne m'aidera pas à mieux comprendre un problème. Cela est dû à une difficulté à catégoriser les problèmes : un problème simple pour une entreprise sera complexe pour une autre et vice-versa. Les critères d'attribution deviennent tellement subjectifs que ce n'est pas le quadrant qui fait le travail mais son manipulateur.

Néanmoins, Cynefin n'est pas un échec total du point de vue des quadrants, il existe bien pire.

## Comment louper son quadrant

Si le quadrant du Cynefin est douteux, il est aussi possible de totalement loupé un quadrant. C'est à mon avis le cas des études de Redmonk, en particulier le [classement des langages les plus populaires](https://redmonk.com/sogrady/files/2020/02/lang.rank_.120.wm_.png). Cette fois-ci il y a aussi deux variables : Le nombre de dépôt Github et la popularité sur StackOverflow. Par contre pas de catégorisation des langages. La majorité des langages étant proches du même axe, les langages sont finalement très homogènes. Or l'intérêt de la catégorisation est justement de discriminer intelligemment les choix sans les réduire à une variable arbitraire discutable.

---

La force du quadrant est qu'il complexifie assez le problème pour éviter d'être dogmatique, et rend plus difficile d'attaquer les critères choisis. Il est clairement le plus utile quand il est utilisé pour répondre à une question simple : cette fonctionnalité est-elle nécessaire ? Cette tâche est-elle à faire ? etc. L'exemple de Kano est bon car il a permis de bien prioriser les fonctionnalités. J'aurais pu aussi présenter le [quadrant d'Eisenhower](https://en.wikipedia.org/wiki/Time_management#The_Eisenhower_Method) qui est aussi très discriminant et permet de répondre à un problème avec peu de variables.

Il est utile cependant d'utiliser d'autres méthodes quand la décision est plus importante. Les études qualitatives (comme celle de [0install](http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install/)) ou des méthodes impliquant plus de participants et de documentation sont à favoriser.

Mon quadrant favori n'est pourtant aucun de ceux nommés :

![Economic-Left/Authoritarian: It's ___state, Economic-Right/Authoritarian: ________, Economic-Left/Libertarian It's Free ___, Economic-Right/Libertarian: It's ___ Real Estate](/img/quadrant.jpeg)

---

P.S. : alors que je relis mon article pour le publier, je remarque que je suis un piètre blogueur. Le vrai blogueur aurait fini l'article sur un quadrant de quadrants, rendant bien plus passionnant l'article. Je laisse l'exercice au lecteur motivé par des heures de recherches de quadrants plus ennuyants les uns que les autres !